import os
import platform


def bld_examples(ctx, *args):
    return ctx.path_to(ctx, "BLD_EXAMPLES", "r", *args)


def build(ctx):

    # Execute cookiecuter to copy python example
    folder = os.path.abspath("").replace("docs", "")
    command = (
        "cookiecutter -f --no-input "
        + "--output-dir example/r "
        + folder
        + " project_slug=r_example"
        + " example_to_install=R"
        + " configure_running_r=y"
        + " set_up_git=n"
        + " create_conda_environment_with_name=x"
    )
    ctx(rule=command)

    model_graphs = [
        "steps_only_full.png",
        "model_steps_full.png",
        "model_steps_select.png",
    ]

    ctx(
        features="run_py_script",
        source="organisation_model_steps.py",
        target=[bld_examples(ctx, m) for m in model_graphs],
    )

    project_hierarchies_keys = ["big_pic", "analysis"]
    project_hierarchies_trunks = []
    for key in project_hierarchies_keys:
        project_hierarchies_trunks.append("project_hierarchies_" + key)
        ctx(
            features="run_py_script",
            source="project_hierarchies.py",
            target="{}.tex".format(project_hierarchies_trunks[-1]),
            append=key,
        )

    ctx.add_group()

    dep_trunks = [
        "ajrcomment_dependencies",
        "ajrcomment_dependencies_data_mgmt",
        "ajrcomment_dependencies_main",
        "ajrcomment_dependencies_final",
        "ajrcomment_dependencies_paper",
    ]

    # Get OS to distinguish command line arguments
    operating_system = platform.system()

    for f in dep_trunks + project_hierarchies_trunks:
        graph_types = ["pdf", "png"]
        ctx(features="tex", source="{}.tex".format(f), outs=" ".join(graph_types))
        ctx.add_group()
        for g in graph_types:
            fn = "{}.{}".format(f, g)
            src = os.path.join(ctx.path.get_bld().abspath(), fn)
            tgt = os.path.join(ctx.env.PROJECT_PATHS["BLD_EXAMPLES"].abspath(), "r", fn)

            # LaTeX does not create a node for png files.
            if g == "png":

                if operating_system == "Windows":
                    command_touch = "type nul >> {}".format(tgt)
                else:
                    command_touch = "touch ${TGT}"

                ctx(rule=command_touch, target=fn, always=True, on_results=True)

            if operating_system == "Windows":
                command_copy = "copy {} {}".format(src, tgt)
            else:
                command_copy = "cp {} {}".format(src, tgt)

            ctx(rule=command_copy, source=fn, target=bld_examples(ctx, fn))

    ctx.add_group()
