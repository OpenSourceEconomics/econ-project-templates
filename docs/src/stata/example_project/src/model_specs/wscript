#! python


import os
import sys
import json

# Required to work with Python 2 and 3.
if sys.version_info.major == 3:
    unicode = str
else:
    pass


STATA_MODEL_COMMENT = '''//
// Header with configuration for model:
//    {}
//
// Automatically generated by Waf, do not change!
//
// Adjust model parameters in:
//    {}
//\n\n\n'''


def convert_model_json_to_stata(task):
    """Convert a JSON model specification in ``source[0]`` to a Stata
    do-file, storing dictionary entries in globals.

    Require the JSON file to contain a single, non-nested, dictionary.

    Simply write its entries as Stata globals to the target file.

    """

    model_pars = json.load(open(task.inputs[0].abspath()))
    model_name = os.path.splitext(task.inputs[0].name)[0]

    tgt_content = STATA_MODEL_COMMENT.format(
        model_name, task.inputs[0].abspath()
    )
    for key, val in sorted(model_pars.items()):
        # Adjust for Stata string notation
        if isinstance(val, (str, unicode)):
            val = '"{}"'.format(val)
        tgt_content += 'global {k} = {v}\n'.format(k=key, v=val)
    return task.outputs[0].write(tgt_content)


def convert_geography_json_to_stata(task):
    """Convert the geography model specification in ``source[0]`` to
    a Stata do-file.

    The geography.json file has a different structure than the other ones,
    we get numbers from the order of the list of dictionaries.

    """

    geo_dict_list = json.load(open(task.inputs[0].abspath()))
    model_name = os.path.splitext(task.inputs[0].name)[0]

    tgt_content = STATA_MODEL_COMMENT.format(
        model_name, task.inputs[0].abspath()
    )
    i = 1
    for geo_dict in geo_dict_list:
        for key, val in geo_dict.items():
            # Adjust for Stata string notation
            if isinstance(val, (str, unicode)):
                val = '"{}"'.format(val)
            tgt_content += 'global {k}_{i} = {v}\n'.format(k=key, i=i, v=val)
        i += 1
    return task.outputs[0].write(tgt_content)


def build(ctx):

    for node in ctx.path.ant_glob("*.json"):
        if node.name == 'geography.json':
            ctx(
                rule=convert_geography_json_to_stata,
                source=node,
                target=node.change_ext('.do'),
            )
        else:
            ctx(
                rule=convert_model_json_to_stata,
                source=node,
                target=node.change_ext('.do'),
            )
