import os


def bld_examples(ctx, *args):
    return ctx.path_to(ctx, 'BLD_EXAMPLES', 'python', *args)


def build(ctx):

    model_graphs = [
        'steps_only_full.png',
        'model_steps_full.png',
        'model_steps_select.png'
    ]

    ctx(
        features='run_py_script',
        source='organisation_model_steps.py',
        target=[bld_examples(ctx, m) for m in model_graphs]
    )

    project_hierarchies_keys = [
        'big_pic',
        'analysis'
    ]
    project_hierarchies_trunks = []
    for key in project_hierarchies_keys:
        project_hierarchies_trunks.append('project_hierarchies_' + key)
        ctx(
            features='run_py_script',
            source='project_hierarchies.py',
            target='{}.tex'.format(project_hierarchies_trunks[-1]),
            append=key
        )

    ctx.add_group()

    schelling_trunks = [
        'schelling_dependencies',
        'schelling_dependencies_data_mgmt',
        'schelling_dependencies_main',
        'schelling_dependencies_final',
        'schelling_dependencies_paper'
    ]

    for f in schelling_trunks + project_hierarchies_trunks:
        graph_types = ['pdf', 'png']
        ctx(
            features='tex',
            source='{}.tex'.format(f),
            outs=' '.join(graph_types)
        )
        ctx.add_group()
        for g in graph_types:
            fn = '{}.{}'.format(f, g)
            src = os.path.join(ctx.path.get_bld().abspath(), fn)
            tgt = os.path.join(ctx.env.PROJECT_PATHS['BLD_EXAMPLES'].abspath(), 'python', fn)

            # LaTeX does not create a node for png files.
            if g == 'png':
                ctx(
                    rule='touch ${TGT}',
                    target=fn,
                    always=True,
                    on_results=True
                )

            ctx(
                rule='cp {} {}'.format(src, tgt),
                source=fn,
                target=bld_examples(ctx, fn)
            )

    ctx.add_group()
